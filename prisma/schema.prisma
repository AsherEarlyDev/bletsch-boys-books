generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  isbn                String                @id
  title               String
  publisher           String
  publicationYear     Int
  dimensions          Float[]
  pageCount           Int?
  genreID             String
  retailPrice         Float
  inventory           Int                   @default(0)
  authorNames         String
  imageLink           String?
  shelfSpace          Float?                @default(0)
  genre               Genre                 @relation(fields: [genreID], references: [id])
  Buyback             Buyback[]
  InventoryCorrection InventoryCorrection[]
  purchases           Purchase[]
  sales               Sale[]
  ShelfBook           ShelfBook[]
  author              Author[]              @relation("AuthorToBook")
}

model Genre {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]
}

model Vendor {
  id                    String             @id @default(cuid())
  name                  String
  bookBuybackPercentage Float?             @default(0)
  BookBuybackOrder      BookBuybackOrder[]
  purchaseOrder         PurchaseOrder[]
}

model Author {
  id   String @id @default(cuid())
  name String
  book Book[] @relation("AuthorToBook")
}

model Purchase {
  id              String        @id @default(cuid())
  quantity        Int
  price           Float
  bookId          String
  purchaseOrderId String
  subtotal        Float         @default(0)
  book            Book          @relation(fields: [bookId], references: [isbn])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model PurchaseOrder {
  id          String     @id @default(cuid())
  vendorId    String
  date        DateTime
  cost        Float      @default(0)
  totalBooks  Int        @default(0)
  uniqueBooks Int        @default(0)
  vendorName  String     @default("")
  userName    String     @default("")
  purchases   Purchase[]
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
}

model Sale {
  id                   String             @id @default(cuid())
  quantity             Int
  price                Float
  bookId               String
  saleReconciliationId String
  subtotal             Float              @default(0)
  book                 Book               @relation(fields: [bookId], references: [isbn])
  saleReconciliation   saleReconciliation @relation(fields: [saleReconciliationId], references: [id])
}

model saleReconciliation {
  id          String   @id @default(cuid())
  date        DateTime
  revenue     Float    @default(0)
  totalBooks  Int      @default(0)
  uniqueBooks Int      @default(0)
  sales       Sale[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BookBuybackOrder {
  id          String    @id @default(cuid())
  vendorId    String
  date        DateTime
  revenue     Float     @default(0)
  totalBooks  Int       @default(0)
  uniqueBooks Int       @default(0)
  vendorName  String    @default("")
  userName    String    @default("")
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  buybacks    Buyback[]
}

model Buyback {
  id               String           @id @default(cuid())
  quantity         Int
  buybackPrice     Float
  bookId           String
  buybackOrderId   String
  subtotal         Float            @default(0)
  Book             Book             @relation(fields: [bookId], references: [isbn])
  BookBuybackOrder BookBuybackOrder @relation(fields: [buybackOrderId], references: [id])
}

model InventoryCorrection {

  id         String   @id @default(cuid())
  date       DateTime
  bookId     String
  adjustment Int
  userName   String
  book       Book     @relation(fields: [bookId], references: [isbn])
}

model BookCaseContainer {
  name       String      @id @unique
  width      Float
  numShelves Float
  ShelfBook  ShelfBook[]
}

model ShelfBook {
  id                    String             @id @default(cuid())
  shelfNumber           Int
  index                 Int
  mode                  String
  edit                  Boolean
  displayCount          Int
  bookIsbn              String
  Book                  Book               @relation(fields: [bookIsbn], references: [isbn])
  BookCaseContainer     BookCaseContainer? @relation(fields: [bookCaseContainerName], references: [name], onDelete:Cascade)
  bookCaseContainerName String?

}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
