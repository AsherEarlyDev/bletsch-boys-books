generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Author {
  id   String @id
  name String
  Book Book[]
}

model Book {
  isbn            String     @id
  title           String
  publisher       String
  publicationYear Int
  dimensions      Float[]
  pageCount       Int?
  genreID         String
  retailPrice     Float
  inventory       Int        @default(0)
  authorNames     String
  imageLink       String?
  shelfSpace      Float?     @default(0)
  Genre           Genre      @relation(fields: [genreID], references: [id])
  Buyback         Buyback[]
  Purchase        Purchase[]
  Sale            Sale[]
  Author          Author[]
}

model BookBuybackOrder {
  id          String    @id
  vendorId    String
  date        DateTime
  revenue     Float     @default(0)
  totalBooks  Int       @default(0)
  uniqueBooks Int       @default(0)
  vendorName  String    @default("")
  userName    String    @default("")
  Vendor      Vendor    @relation(fields: [vendorId], references: [id])
  Buyback     Buyback[]
}

model Buyback {
  id               String           @id
  quantity         Int
  buybackPrice     Float
  bookId           String
  buybackOrderId   String
  subtotal         Float            @default(0)
  Book             Book             @relation(fields: [bookId], references: [isbn])
  BookBuybackOrder BookBuybackOrder @relation(fields: [buybackOrderId], references: [id])
}

model Genre {
  id   String @id
  name String @unique
  Book Book[]
}

model Purchase {
  id              String        @id
  quantity        Int
  price           Float
  bookId          String
  purchaseOrderId String
  subtotal        Float         @default(0)
  Book            Book          @relation(fields: [bookId], references: [isbn])
  PurchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model PurchaseOrder {
  id          String     @id
  vendorId    String
  date        DateTime
  cost        Float      @default(0)
  totalBooks  Int        @default(0)
  uniqueBooks Int        @default(0)
  vendorName  String     @default("")
  userName    String     @default("")
  Purchase    Purchase[]
  Vendor      Vendor     @relation(fields: [vendorId], references: [id])
}

model Sale {
  id                   String             @id
  quantity             Int
  price                Float
  bookId               String
  saleReconciliationId String
  subtotal             Float              @default(0)
  Book                 Book               @relation(fields: [bookId], references: [isbn])
  saleReconciliation   saleReconciliation @relation(fields: [saleReconciliationId], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(USER)
  Account       Account[]
  Session       Session[]
}

model Vendor {
  id                    String             @id
  name                  String
  bookBuybackPercentage Float?             @default(0)
  BookBuybackOrder      BookBuybackOrder[]
  PurchaseOrder         PurchaseOrder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model saleReconciliation {
  id          String   @id
  date        DateTime
  revenue     Float    @default(0)
  totalBooks  Int      @default(0)
  uniqueBooks Int      @default(0)
  Sale        Sale[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
